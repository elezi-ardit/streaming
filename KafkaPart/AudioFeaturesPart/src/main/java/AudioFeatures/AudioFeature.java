/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package AudioFeatures;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class AudioFeature extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8502779348565642269L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AudioFeature\",\"namespace\":\"AudioFeatures\",\"fields\":[{\"name\":\"acousticness\",\"type\":\"double\"},{\"name\":\"analysis_url\",\"type\":\"string\"},{\"name\":\"danceability\",\"type\":\"double\"},{\"name\":\"duration_ms\",\"type\":\"int\"},{\"name\":\"energy\",\"type\":\"double\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"instrumentalness\",\"type\":\"double\"},{\"name\":\"key\",\"type\":\"int\"},{\"name\":\"liveness\",\"type\":\"double\"},{\"name\":\"loudness\",\"type\":\"double\"},{\"name\":\"mode\",\"type\":\"int\"},{\"name\":\"speechiness\",\"type\":\"double\"},{\"name\":\"tempo\",\"type\":\"double\"},{\"name\":\"time_signature\",\"type\":\"int\"},{\"name\":\"track_href\",\"type\":\"string\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"uri\",\"type\":\"string\"},{\"name\":\"valence\",\"type\":\"double\"},{\"name\":\"eventTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AudioFeature> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AudioFeature> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<AudioFeature> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<AudioFeature> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<AudioFeature> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this AudioFeature to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a AudioFeature from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a AudioFeature instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static AudioFeature fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private double acousticness;
  private CharSequence analysis_url;
  private double danceability;
  private int duration_ms;
  private double energy;
  private CharSequence id;
  private double instrumentalness;
  private int key;
  private double liveness;
  private double loudness;
  private int mode;
  private double speechiness;
  private double tempo;
  private int time_signature;
  private CharSequence track_href;
  private CharSequence type;
  private CharSequence uri;
  private double valence;
  private CharSequence eventTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AudioFeature() {}

  /**
   * All-args constructor.
   * @param acousticness The new value for acousticness
   * @param analysis_url The new value for analysis_url
   * @param danceability The new value for danceability
   * @param duration_ms The new value for duration_ms
   * @param energy The new value for energy
   * @param id The new value for id
   * @param instrumentalness The new value for instrumentalness
   * @param key The new value for key
   * @param liveness The new value for liveness
   * @param loudness The new value for loudness
   * @param mode The new value for mode
   * @param speechiness The new value for speechiness
   * @param tempo The new value for tempo
   * @param time_signature The new value for time_signature
   * @param track_href The new value for track_href
   * @param type The new value for type
   * @param uri The new value for uri
   * @param valence The new value for valence
   * @param eventTime The new value for eventTime
   */
  public AudioFeature(Double acousticness, CharSequence analysis_url, Double danceability, Integer duration_ms, Double energy, CharSequence id, Double instrumentalness, Integer key, Double liveness, Double loudness, Integer mode, Double speechiness, Double tempo, Integer time_signature, CharSequence track_href, CharSequence type, CharSequence uri, Double valence, CharSequence eventTime) {
    this.acousticness = acousticness;
    this.analysis_url = analysis_url;
    this.danceability = danceability;
    this.duration_ms = duration_ms;
    this.energy = energy;
    this.id = id;
    this.instrumentalness = instrumentalness;
    this.key = key;
    this.liveness = liveness;
    this.loudness = loudness;
    this.mode = mode;
    this.speechiness = speechiness;
    this.tempo = tempo;
    this.time_signature = time_signature;
    this.track_href = track_href;
    this.type = type;
    this.uri = uri;
    this.valence = valence;
    this.eventTime = eventTime;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return acousticness;
    case 1: return analysis_url;
    case 2: return danceability;
    case 3: return duration_ms;
    case 4: return energy;
    case 5: return id;
    case 6: return instrumentalness;
    case 7: return key;
    case 8: return liveness;
    case 9: return loudness;
    case 10: return mode;
    case 11: return speechiness;
    case 12: return tempo;
    case 13: return time_signature;
    case 14: return track_href;
    case 15: return type;
    case 16: return uri;
    case 17: return valence;
    case 18: return eventTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: acousticness = (Double)value$; break;
    case 1: analysis_url = (CharSequence)value$; break;
    case 2: danceability = (Double)value$; break;
    case 3: duration_ms = (Integer)value$; break;
    case 4: energy = (Double)value$; break;
    case 5: id = (CharSequence)value$; break;
    case 6: instrumentalness = (Double)value$; break;
    case 7: key = (Integer)value$; break;
    case 8: liveness = (Double)value$; break;
    case 9: loudness = (Double)value$; break;
    case 10: mode = (Integer)value$; break;
    case 11: speechiness = (Double)value$; break;
    case 12: tempo = (Double)value$; break;
    case 13: time_signature = (Integer)value$; break;
    case 14: track_href = (CharSequence)value$; break;
    case 15: type = (CharSequence)value$; break;
    case 16: uri = (CharSequence)value$; break;
    case 17: valence = (Double)value$; break;
    case 18: eventTime = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'acousticness' field.
   * @return The value of the 'acousticness' field.
   */
  public double getAcousticness() {
    return acousticness;
  }


  /**
   * Sets the value of the 'acousticness' field.
   * @param value the value to set.
   */
  public void setAcousticness(double value) {
    this.acousticness = value;
  }

  /**
   * Gets the value of the 'analysis_url' field.
   * @return The value of the 'analysis_url' field.
   */
  public CharSequence getAnalysisUrl() {
    return analysis_url;
  }


  /**
   * Sets the value of the 'analysis_url' field.
   * @param value the value to set.
   */
  public void setAnalysisUrl(CharSequence value) {
    this.analysis_url = value;
  }

  /**
   * Gets the value of the 'danceability' field.
   * @return The value of the 'danceability' field.
   */
  public double getDanceability() {
    return danceability;
  }


  /**
   * Sets the value of the 'danceability' field.
   * @param value the value to set.
   */
  public void setDanceability(double value) {
    this.danceability = value;
  }

  /**
   * Gets the value of the 'duration_ms' field.
   * @return The value of the 'duration_ms' field.
   */
  public int getDurationMs() {
    return duration_ms;
  }


  /**
   * Sets the value of the 'duration_ms' field.
   * @param value the value to set.
   */
  public void setDurationMs(int value) {
    this.duration_ms = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return The value of the 'energy' field.
   */
  public double getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * @param value the value to set.
   */
  public void setEnergy(double value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'instrumentalness' field.
   * @return The value of the 'instrumentalness' field.
   */
  public double getInstrumentalness() {
    return instrumentalness;
  }


  /**
   * Sets the value of the 'instrumentalness' field.
   * @param value the value to set.
   */
  public void setInstrumentalness(double value) {
    this.instrumentalness = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public int getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(int value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'liveness' field.
   * @return The value of the 'liveness' field.
   */
  public double getLiveness() {
    return liveness;
  }


  /**
   * Sets the value of the 'liveness' field.
   * @param value the value to set.
   */
  public void setLiveness(double value) {
    this.liveness = value;
  }

  /**
   * Gets the value of the 'loudness' field.
   * @return The value of the 'loudness' field.
   */
  public double getLoudness() {
    return loudness;
  }


  /**
   * Sets the value of the 'loudness' field.
   * @param value the value to set.
   */
  public void setLoudness(double value) {
    this.loudness = value;
  }

  /**
   * Gets the value of the 'mode' field.
   * @return The value of the 'mode' field.
   */
  public int getMode() {
    return mode;
  }


  /**
   * Sets the value of the 'mode' field.
   * @param value the value to set.
   */
  public void setMode(int value) {
    this.mode = value;
  }

  /**
   * Gets the value of the 'speechiness' field.
   * @return The value of the 'speechiness' field.
   */
  public double getSpeechiness() {
    return speechiness;
  }


  /**
   * Sets the value of the 'speechiness' field.
   * @param value the value to set.
   */
  public void setSpeechiness(double value) {
    this.speechiness = value;
  }

  /**
   * Gets the value of the 'tempo' field.
   * @return The value of the 'tempo' field.
   */
  public double getTempo() {
    return tempo;
  }


  /**
   * Sets the value of the 'tempo' field.
   * @param value the value to set.
   */
  public void setTempo(double value) {
    this.tempo = value;
  }

  /**
   * Gets the value of the 'time_signature' field.
   * @return The value of the 'time_signature' field.
   */
  public int getTimeSignature() {
    return time_signature;
  }


  /**
   * Sets the value of the 'time_signature' field.
   * @param value the value to set.
   */
  public void setTimeSignature(int value) {
    this.time_signature = value;
  }

  /**
   * Gets the value of the 'track_href' field.
   * @return The value of the 'track_href' field.
   */
  public CharSequence getTrackHref() {
    return track_href;
  }


  /**
   * Sets the value of the 'track_href' field.
   * @param value the value to set.
   */
  public void setTrackHref(CharSequence value) {
    this.track_href = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'uri' field.
   * @return The value of the 'uri' field.
   */
  public CharSequence getUri() {
    return uri;
  }


  /**
   * Sets the value of the 'uri' field.
   * @param value the value to set.
   */
  public void setUri(CharSequence value) {
    this.uri = value;
  }

  /**
   * Gets the value of the 'valence' field.
   * @return The value of the 'valence' field.
   */
  public double getValence() {
    return valence;
  }


  /**
   * Sets the value of the 'valence' field.
   * @param value the value to set.
   */
  public void setValence(double value) {
    this.valence = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public CharSequence getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(CharSequence value) {
    this.eventTime = value;
  }

  /**
   * Creates a new AudioFeature RecordBuilder.
   * @return A new AudioFeature RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new AudioFeature RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AudioFeature RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new AudioFeature RecordBuilder by copying an existing AudioFeature instance.
   * @param other The existing instance to copy.
   * @return A new AudioFeature RecordBuilder
   */
  public static Builder newBuilder(AudioFeature other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for AudioFeature instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AudioFeature>
    implements org.apache.avro.data.RecordBuilder<AudioFeature> {

    private double acousticness;
    private CharSequence analysis_url;
    private double danceability;
    private int duration_ms;
    private double energy;
    private CharSequence id;
    private double instrumentalness;
    private int key;
    private double liveness;
    private double loudness;
    private int mode;
    private double speechiness;
    private double tempo;
    private int time_signature;
    private CharSequence track_href;
    private CharSequence type;
    private CharSequence uri;
    private double valence;
    private CharSequence eventTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[0].schema(), other.acousticness);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.analysis_url)) {
        this.analysis_url = data().deepCopy(fields()[1].schema(), other.analysis_url);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.danceability)) {
        this.danceability = data().deepCopy(fields()[2].schema(), other.danceability);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[3].schema(), other.duration_ms);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.energy)) {
        this.energy = data().deepCopy(fields()[4].schema(), other.energy);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[6].schema(), other.instrumentalness);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.key)) {
        this.key = data().deepCopy(fields()[7].schema(), other.key);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.liveness)) {
        this.liveness = data().deepCopy(fields()[8].schema(), other.liveness);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.loudness)) {
        this.loudness = data().deepCopy(fields()[9].schema(), other.loudness);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.mode)) {
        this.mode = data().deepCopy(fields()[10].schema(), other.mode);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[11].schema(), other.speechiness);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.tempo)) {
        this.tempo = data().deepCopy(fields()[12].schema(), other.tempo);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[13].schema(), other.time_signature);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.track_href)) {
        this.track_href = data().deepCopy(fields()[14].schema(), other.track_href);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.type)) {
        this.type = data().deepCopy(fields()[15].schema(), other.type);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.uri)) {
        this.uri = data().deepCopy(fields()[16].schema(), other.uri);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.valence)) {
        this.valence = data().deepCopy(fields()[17].schema(), other.valence);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[18].schema(), other.eventTime);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
    }

    /**
     * Creates a Builder by copying an existing AudioFeature instance
     * @param other The existing instance to copy.
     */
    private Builder(AudioFeature other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.acousticness)) {
        this.acousticness = data().deepCopy(fields()[0].schema(), other.acousticness);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.analysis_url)) {
        this.analysis_url = data().deepCopy(fields()[1].schema(), other.analysis_url);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.danceability)) {
        this.danceability = data().deepCopy(fields()[2].schema(), other.danceability);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[3].schema(), other.duration_ms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.energy)) {
        this.energy = data().deepCopy(fields()[4].schema(), other.energy);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.instrumentalness)) {
        this.instrumentalness = data().deepCopy(fields()[6].schema(), other.instrumentalness);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.key)) {
        this.key = data().deepCopy(fields()[7].schema(), other.key);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.liveness)) {
        this.liveness = data().deepCopy(fields()[8].schema(), other.liveness);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.loudness)) {
        this.loudness = data().deepCopy(fields()[9].schema(), other.loudness);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.mode)) {
        this.mode = data().deepCopy(fields()[10].schema(), other.mode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.speechiness)) {
        this.speechiness = data().deepCopy(fields()[11].schema(), other.speechiness);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.tempo)) {
        this.tempo = data().deepCopy(fields()[12].schema(), other.tempo);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.time_signature)) {
        this.time_signature = data().deepCopy(fields()[13].schema(), other.time_signature);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.track_href)) {
        this.track_href = data().deepCopy(fields()[14].schema(), other.track_href);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.type)) {
        this.type = data().deepCopy(fields()[15].schema(), other.type);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.uri)) {
        this.uri = data().deepCopy(fields()[16].schema(), other.uri);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.valence)) {
        this.valence = data().deepCopy(fields()[17].schema(), other.valence);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[18].schema(), other.eventTime);
        fieldSetFlags()[18] = true;
      }
    }

    /**
      * Gets the value of the 'acousticness' field.
      * @return The value.
      */
    public double getAcousticness() {
      return acousticness;
    }


    /**
      * Sets the value of the 'acousticness' field.
      * @param value The value of 'acousticness'.
      * @return This builder.
      */
    public Builder setAcousticness(double value) {
      validate(fields()[0], value);
      this.acousticness = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'acousticness' field has been set.
      * @return True if the 'acousticness' field has been set, false otherwise.
      */
    public boolean hasAcousticness() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'acousticness' field.
      * @return This builder.
      */
    public Builder clearAcousticness() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'analysis_url' field.
      * @return The value.
      */
    public CharSequence getAnalysisUrl() {
      return analysis_url;
    }


    /**
      * Sets the value of the 'analysis_url' field.
      * @param value The value of 'analysis_url'.
      * @return This builder.
      */
    public Builder setAnalysisUrl(CharSequence value) {
      validate(fields()[1], value);
      this.analysis_url = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'analysis_url' field has been set.
      * @return True if the 'analysis_url' field has been set, false otherwise.
      */
    public boolean hasAnalysisUrl() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'analysis_url' field.
      * @return This builder.
      */
    public Builder clearAnalysisUrl() {
      analysis_url = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'danceability' field.
      * @return The value.
      */
    public double getDanceability() {
      return danceability;
    }


    /**
      * Sets the value of the 'danceability' field.
      * @param value The value of 'danceability'.
      * @return This builder.
      */
    public Builder setDanceability(double value) {
      validate(fields()[2], value);
      this.danceability = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'danceability' field has been set.
      * @return True if the 'danceability' field has been set, false otherwise.
      */
    public boolean hasDanceability() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'danceability' field.
      * @return This builder.
      */
    public Builder clearDanceability() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration_ms' field.
      * @return The value.
      */
    public int getDurationMs() {
      return duration_ms;
    }


    /**
      * Sets the value of the 'duration_ms' field.
      * @param value The value of 'duration_ms'.
      * @return This builder.
      */
    public Builder setDurationMs(int value) {
      validate(fields()[3], value);
      this.duration_ms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'duration_ms' field has been set.
      * @return True if the 'duration_ms' field has been set, false otherwise.
      */
    public boolean hasDurationMs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'duration_ms' field.
      * @return This builder.
      */
    public Builder clearDurationMs() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * @return The value.
      */
    public double getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public Builder setEnergy(double value) {
      validate(fields()[4], value);
      this.energy = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'energy' field.
      * @return This builder.
      */
    public Builder clearEnergy() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[5], value);
      this.id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'instrumentalness' field.
      * @return The value.
      */
    public double getInstrumentalness() {
      return instrumentalness;
    }


    /**
      * Sets the value of the 'instrumentalness' field.
      * @param value The value of 'instrumentalness'.
      * @return This builder.
      */
    public Builder setInstrumentalness(double value) {
      validate(fields()[6], value);
      this.instrumentalness = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'instrumentalness' field has been set.
      * @return True if the 'instrumentalness' field has been set, false otherwise.
      */
    public boolean hasInstrumentalness() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'instrumentalness' field.
      * @return This builder.
      */
    public Builder clearInstrumentalness() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public int getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public Builder setKey(int value) {
      validate(fields()[7], value);
      this.key = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public Builder clearKey() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'liveness' field.
      * @return The value.
      */
    public double getLiveness() {
      return liveness;
    }


    /**
      * Sets the value of the 'liveness' field.
      * @param value The value of 'liveness'.
      * @return This builder.
      */
    public Builder setLiveness(double value) {
      validate(fields()[8], value);
      this.liveness = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'liveness' field has been set.
      * @return True if the 'liveness' field has been set, false otherwise.
      */
    public boolean hasLiveness() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'liveness' field.
      * @return This builder.
      */
    public Builder clearLiveness() {
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'loudness' field.
      * @return The value.
      */
    public double getLoudness() {
      return loudness;
    }


    /**
      * Sets the value of the 'loudness' field.
      * @param value The value of 'loudness'.
      * @return This builder.
      */
    public Builder setLoudness(double value) {
      validate(fields()[9], value);
      this.loudness = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'loudness' field has been set.
      * @return True if the 'loudness' field has been set, false otherwise.
      */
    public boolean hasLoudness() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'loudness' field.
      * @return This builder.
      */
    public Builder clearLoudness() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'mode' field.
      * @return The value.
      */
    public int getMode() {
      return mode;
    }


    /**
      * Sets the value of the 'mode' field.
      * @param value The value of 'mode'.
      * @return This builder.
      */
    public Builder setMode(int value) {
      validate(fields()[10], value);
      this.mode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'mode' field has been set.
      * @return True if the 'mode' field has been set, false otherwise.
      */
    public boolean hasMode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'mode' field.
      * @return This builder.
      */
    public Builder clearMode() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'speechiness' field.
      * @return The value.
      */
    public double getSpeechiness() {
      return speechiness;
    }


    /**
      * Sets the value of the 'speechiness' field.
      * @param value The value of 'speechiness'.
      * @return This builder.
      */
    public Builder setSpeechiness(double value) {
      validate(fields()[11], value);
      this.speechiness = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'speechiness' field has been set.
      * @return True if the 'speechiness' field has been set, false otherwise.
      */
    public boolean hasSpeechiness() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'speechiness' field.
      * @return This builder.
      */
    public Builder clearSpeechiness() {
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempo' field.
      * @return The value.
      */
    public double getTempo() {
      return tempo;
    }


    /**
      * Sets the value of the 'tempo' field.
      * @param value The value of 'tempo'.
      * @return This builder.
      */
    public Builder setTempo(double value) {
      validate(fields()[12], value);
      this.tempo = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'tempo' field has been set.
      * @return True if the 'tempo' field has been set, false otherwise.
      */
    public boolean hasTempo() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'tempo' field.
      * @return This builder.
      */
    public Builder clearTempo() {
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'time_signature' field.
      * @return The value.
      */
    public int getTimeSignature() {
      return time_signature;
    }


    /**
      * Sets the value of the 'time_signature' field.
      * @param value The value of 'time_signature'.
      * @return This builder.
      */
    public Builder setTimeSignature(int value) {
      validate(fields()[13], value);
      this.time_signature = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'time_signature' field has been set.
      * @return True if the 'time_signature' field has been set, false otherwise.
      */
    public boolean hasTimeSignature() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'time_signature' field.
      * @return This builder.
      */
    public Builder clearTimeSignature() {
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_href' field.
      * @return The value.
      */
    public CharSequence getTrackHref() {
      return track_href;
    }


    /**
      * Sets the value of the 'track_href' field.
      * @param value The value of 'track_href'.
      * @return This builder.
      */
    public Builder setTrackHref(CharSequence value) {
      validate(fields()[14], value);
      this.track_href = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'track_href' field has been set.
      * @return True if the 'track_href' field has been set, false otherwise.
      */
    public boolean hasTrackHref() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'track_href' field.
      * @return This builder.
      */
    public Builder clearTrackHref() {
      track_href = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[15], value);
      this.type = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'uri' field.
      * @return The value.
      */
    public CharSequence getUri() {
      return uri;
    }


    /**
      * Sets the value of the 'uri' field.
      * @param value The value of 'uri'.
      * @return This builder.
      */
    public Builder setUri(CharSequence value) {
      validate(fields()[16], value);
      this.uri = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'uri' field has been set.
      * @return True if the 'uri' field has been set, false otherwise.
      */
    public boolean hasUri() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'uri' field.
      * @return This builder.
      */
    public Builder clearUri() {
      uri = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'valence' field.
      * @return The value.
      */
    public double getValence() {
      return valence;
    }


    /**
      * Sets the value of the 'valence' field.
      * @param value The value of 'valence'.
      * @return This builder.
      */
    public Builder setValence(double value) {
      validate(fields()[17], value);
      this.valence = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'valence' field has been set.
      * @return True if the 'valence' field has been set, false otherwise.
      */
    public boolean hasValence() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'valence' field.
      * @return This builder.
      */
    public Builder clearValence() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public CharSequence getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public Builder setEventTime(CharSequence value) {
      validate(fields()[18], value);
      this.eventTime = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public Builder clearEventTime() {
      eventTime = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AudioFeature build() {
      try {
        AudioFeature record = new AudioFeature();
        record.acousticness = fieldSetFlags()[0] ? this.acousticness : (Double) defaultValue(fields()[0]);
        record.analysis_url = fieldSetFlags()[1] ? this.analysis_url : (CharSequence) defaultValue(fields()[1]);
        record.danceability = fieldSetFlags()[2] ? this.danceability : (Double) defaultValue(fields()[2]);
        record.duration_ms = fieldSetFlags()[3] ? this.duration_ms : (Integer) defaultValue(fields()[3]);
        record.energy = fieldSetFlags()[4] ? this.energy : (Double) defaultValue(fields()[4]);
        record.id = fieldSetFlags()[5] ? this.id : (CharSequence) defaultValue(fields()[5]);
        record.instrumentalness = fieldSetFlags()[6] ? this.instrumentalness : (Double) defaultValue(fields()[6]);
        record.key = fieldSetFlags()[7] ? this.key : (Integer) defaultValue(fields()[7]);
        record.liveness = fieldSetFlags()[8] ? this.liveness : (Double) defaultValue(fields()[8]);
        record.loudness = fieldSetFlags()[9] ? this.loudness : (Double) defaultValue(fields()[9]);
        record.mode = fieldSetFlags()[10] ? this.mode : (Integer) defaultValue(fields()[10]);
        record.speechiness = fieldSetFlags()[11] ? this.speechiness : (Double) defaultValue(fields()[11]);
        record.tempo = fieldSetFlags()[12] ? this.tempo : (Double) defaultValue(fields()[12]);
        record.time_signature = fieldSetFlags()[13] ? this.time_signature : (Integer) defaultValue(fields()[13]);
        record.track_href = fieldSetFlags()[14] ? this.track_href : (CharSequence) defaultValue(fields()[14]);
        record.type = fieldSetFlags()[15] ? this.type : (CharSequence) defaultValue(fields()[15]);
        record.uri = fieldSetFlags()[16] ? this.uri : (CharSequence) defaultValue(fields()[16]);
        record.valence = fieldSetFlags()[17] ? this.valence : (Double) defaultValue(fields()[17]);
        record.eventTime = fieldSetFlags()[18] ? this.eventTime : (CharSequence) defaultValue(fields()[18]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AudioFeature>
    WRITER$ = (org.apache.avro.io.DatumWriter<AudioFeature>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AudioFeature>
    READER$ = (org.apache.avro.io.DatumReader<AudioFeature>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeDouble(this.acousticness);

    out.writeString(this.analysis_url);

    out.writeDouble(this.danceability);

    out.writeInt(this.duration_ms);

    out.writeDouble(this.energy);

    out.writeString(this.id);

    out.writeDouble(this.instrumentalness);

    out.writeInt(this.key);

    out.writeDouble(this.liveness);

    out.writeDouble(this.loudness);

    out.writeInt(this.mode);

    out.writeDouble(this.speechiness);

    out.writeDouble(this.tempo);

    out.writeInt(this.time_signature);

    out.writeString(this.track_href);

    out.writeString(this.type);

    out.writeString(this.uri);

    out.writeDouble(this.valence);

    out.writeString(this.eventTime);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.acousticness = in.readDouble();

      this.analysis_url = in.readString(this.analysis_url instanceof Utf8 ? (Utf8)this.analysis_url : null);

      this.danceability = in.readDouble();

      this.duration_ms = in.readInt();

      this.energy = in.readDouble();

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.instrumentalness = in.readDouble();

      this.key = in.readInt();

      this.liveness = in.readDouble();

      this.loudness = in.readDouble();

      this.mode = in.readInt();

      this.speechiness = in.readDouble();

      this.tempo = in.readDouble();

      this.time_signature = in.readInt();

      this.track_href = in.readString(this.track_href instanceof Utf8 ? (Utf8)this.track_href : null);

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);

      this.valence = in.readDouble();

      this.eventTime = in.readString(this.eventTime instanceof Utf8 ? (Utf8)this.eventTime : null);

    } else {
      for (int i = 0; i < 19; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.acousticness = in.readDouble();
          break;

        case 1:
          this.analysis_url = in.readString(this.analysis_url instanceof Utf8 ? (Utf8)this.analysis_url : null);
          break;

        case 2:
          this.danceability = in.readDouble();
          break;

        case 3:
          this.duration_ms = in.readInt();
          break;

        case 4:
          this.energy = in.readDouble();
          break;

        case 5:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 6:
          this.instrumentalness = in.readDouble();
          break;

        case 7:
          this.key = in.readInt();
          break;

        case 8:
          this.liveness = in.readDouble();
          break;

        case 9:
          this.loudness = in.readDouble();
          break;

        case 10:
          this.mode = in.readInt();
          break;

        case 11:
          this.speechiness = in.readDouble();
          break;

        case 12:
          this.tempo = in.readDouble();
          break;

        case 13:
          this.time_signature = in.readInt();
          break;

        case 14:
          this.track_href = in.readString(this.track_href instanceof Utf8 ? (Utf8)this.track_href : null);
          break;

        case 15:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 16:
          this.uri = in.readString(this.uri instanceof Utf8 ? (Utf8)this.uri : null);
          break;

        case 17:
          this.valence = in.readDouble();
          break;

        case 18:
          this.eventTime = in.readString(this.eventTime instanceof Utf8 ? (Utf8)this.eventTime : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










