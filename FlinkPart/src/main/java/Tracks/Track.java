/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package Tracks;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;

@org.apache.avro.specific.AvroGenerated
public class Track extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1074503805275917405L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Track\",\"namespace\":\"Tracks\",\"fields\":[{\"name\":\"album\",\"type\":{\"type\":\"record\",\"name\":\"Album\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]}},{\"name\":\"artists\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Artist\",\"fields\":[{\"name\":\"name\",\"type\":\"string\"}]},\"java-class\":\"java.util.List\"}},{\"name\":\"disc_number\",\"type\":\"int\"},{\"name\":\"duration_ms\",\"type\":\"int\"},{\"name\":\"explicit\",\"type\":\"boolean\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"popularity\",\"type\":\"int\"},{\"name\":\"type\",\"type\":\"string\"},{\"name\":\"eventTime\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Track> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Track> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Track> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Track> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Track> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Track to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Track from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Track instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Track fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private Album album;
  private java.util.List<Artist> artists;
  private int disc_number;
  private int duration_ms;
  private boolean explicit;
  private CharSequence id;
  private CharSequence name;
  private int popularity;
  private CharSequence type;
  private CharSequence eventTime;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Track() {}

  /**
   * All-args constructor.
   * @param album The new value for album
   * @param artists The new value for artists
   * @param disc_number The new value for disc_number
   * @param duration_ms The new value for duration_ms
   * @param explicit The new value for explicit
   * @param id The new value for id
   * @param name The new value for name
   * @param popularity The new value for popularity
   * @param type The new value for type
   * @param eventTime The new value for eventTime
   */
  public Track(Album album, java.util.List<Artist> artists, Integer disc_number, Integer duration_ms, Boolean explicit, CharSequence id, CharSequence name, Integer popularity, CharSequence type, CharSequence eventTime) {
    this.album = album;
    this.artists = artists;
    this.disc_number = disc_number;
    this.duration_ms = duration_ms;
    this.explicit = explicit;
    this.id = id;
    this.name = name;
    this.popularity = popularity;
    this.type = type;
    this.eventTime = eventTime;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return album;
    case 1: return artists;
    case 2: return disc_number;
    case 3: return duration_ms;
    case 4: return explicit;
    case 5: return id;
    case 6: return name;
    case 7: return popularity;
    case 8: return type;
    case 9: return eventTime;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: album = (Album)value$; break;
    case 1: artists = (java.util.List<Artist>)value$; break;
    case 2: disc_number = (Integer)value$; break;
    case 3: duration_ms = (Integer)value$; break;
    case 4: explicit = (Boolean)value$; break;
    case 5: id = (CharSequence)value$; break;
    case 6: name = (CharSequence)value$; break;
    case 7: popularity = (Integer)value$; break;
    case 8: type = (CharSequence)value$; break;
    case 9: eventTime = (CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'album' field.
   * @return The value of the 'album' field.
   */
  public Album getAlbum() {
    return album;
  }


  /**
   * Sets the value of the 'album' field.
   * @param value the value to set.
   */
  public void setAlbum(Album value) {
    this.album = value;
  }

  /**
   * Gets the value of the 'artists' field.
   * @return The value of the 'artists' field.
   */
  public java.util.List<Artist> getArtists() {
    return artists;
  }


  /**
   * Sets the value of the 'artists' field.
   * @param value the value to set.
   */
  public void setArtists(java.util.List<Artist> value) {
    this.artists = value;
  }

  /**
   * Gets the value of the 'disc_number' field.
   * @return The value of the 'disc_number' field.
   */
  public int getDiscNumber() {
    return disc_number;
  }


  /**
   * Sets the value of the 'disc_number' field.
   * @param value the value to set.
   */
  public void setDiscNumber(int value) {
    this.disc_number = value;
  }

  /**
   * Gets the value of the 'duration_ms' field.
   * @return The value of the 'duration_ms' field.
   */
  public int getDurationMs() {
    return duration_ms;
  }


  /**
   * Sets the value of the 'duration_ms' field.
   * @param value the value to set.
   */
  public void setDurationMs(int value) {
    this.duration_ms = value;
  }

  /**
   * Gets the value of the 'explicit' field.
   * @return The value of the 'explicit' field.
   */
  public boolean getExplicit() {
    return explicit;
  }


  /**
   * Sets the value of the 'explicit' field.
   * @param value the value to set.
   */
  public void setExplicit(boolean value) {
    this.explicit = value;
  }

  /**
   * Gets the value of the 'id' field.
   * @return The value of the 'id' field.
   */
  public CharSequence getId() {
    return id;
  }


  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'popularity' field.
   * @return The value of the 'popularity' field.
   */
  public int getPopularity() {
    return popularity;
  }


  /**
   * Sets the value of the 'popularity' field.
   * @param value the value to set.
   */
  public void setPopularity(int value) {
    this.popularity = value;
  }

  /**
   * Gets the value of the 'type' field.
   * @return The value of the 'type' field.
   */
  public CharSequence getType() {
    return type;
  }


  /**
   * Sets the value of the 'type' field.
   * @param value the value to set.
   */
  public void setType(CharSequence value) {
    this.type = value;
  }

  /**
   * Gets the value of the 'eventTime' field.
   * @return The value of the 'eventTime' field.
   */
  public CharSequence getEventTime() {
    return eventTime;
  }


  /**
   * Sets the value of the 'eventTime' field.
   * @param value the value to set.
   */
  public void setEventTime(CharSequence value) {
    this.eventTime = value;
  }

  /**
   * Creates a new Track RecordBuilder.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new Track RecordBuilder by copying an existing Track instance.
   * @param other The existing instance to copy.
   * @return A new Track RecordBuilder
   */
  public static Builder newBuilder(Track other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for Track instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Track>
    implements org.apache.avro.data.RecordBuilder<Track> {

    private Album album;
    private Album.Builder albumBuilder;
    private java.util.List<Artist> artists;
    private int disc_number;
    private int duration_ms;
    private boolean explicit;
    private CharSequence id;
    private CharSequence name;
    private int popularity;
    private CharSequence type;
    private CharSequence eventTime;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.album)) {
        this.album = data().deepCopy(fields()[0].schema(), other.album);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasAlbumBuilder()) {
        this.albumBuilder = Album.newBuilder(other.getAlbumBuilder());
      }
      if (isValidValue(fields()[1], other.artists)) {
        this.artists = data().deepCopy(fields()[1].schema(), other.artists);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.disc_number)) {
        this.disc_number = data().deepCopy(fields()[2].schema(), other.disc_number);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[3].schema(), other.duration_ms);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.explicit)) {
        this.explicit = data().deepCopy(fields()[4].schema(), other.explicit);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.popularity)) {
        this.popularity = data().deepCopy(fields()[7].schema(), other.popularity);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[9].schema(), other.eventTime);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
    }

    /**
     * Creates a Builder by copying an existing Track instance
     * @param other The existing instance to copy.
     */
    private Builder(Track other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.album)) {
        this.album = data().deepCopy(fields()[0].schema(), other.album);
        fieldSetFlags()[0] = true;
      }
      this.albumBuilder = null;
      if (isValidValue(fields()[1], other.artists)) {
        this.artists = data().deepCopy(fields()[1].schema(), other.artists);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.disc_number)) {
        this.disc_number = data().deepCopy(fields()[2].schema(), other.disc_number);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.duration_ms)) {
        this.duration_ms = data().deepCopy(fields()[3].schema(), other.duration_ms);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.explicit)) {
        this.explicit = data().deepCopy(fields()[4].schema(), other.explicit);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.id)) {
        this.id = data().deepCopy(fields()[5].schema(), other.id);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.popularity)) {
        this.popularity = data().deepCopy(fields()[7].schema(), other.popularity);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.type)) {
        this.type = data().deepCopy(fields()[8].schema(), other.type);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.eventTime)) {
        this.eventTime = data().deepCopy(fields()[9].schema(), other.eventTime);
        fieldSetFlags()[9] = true;
      }
    }

    /**
      * Gets the value of the 'album' field.
      * @return The value.
      */
    public Album getAlbum() {
      return album;
    }


    /**
      * Sets the value of the 'album' field.
      * @param value The value of 'album'.
      * @return This builder.
      */
    public Builder setAlbum(Album value) {
      validate(fields()[0], value);
      this.albumBuilder = null;
      this.album = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'album' field has been set.
      * @return True if the 'album' field has been set, false otherwise.
      */
    public boolean hasAlbum() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'album' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public Album.Builder getAlbumBuilder() {
      if (albumBuilder == null) {
        if (hasAlbum()) {
          setAlbumBuilder(Album.newBuilder(album));
        } else {
          setAlbumBuilder(Album.newBuilder());
        }
      }
      return albumBuilder;
    }

    /**
     * Sets the Builder instance for the 'album' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public Builder setAlbumBuilder(Album.Builder value) {
      clearAlbum();
      albumBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'album' field has an active Builder instance
     * @return True if the 'album' field has an active Builder instance
     */
    public boolean hasAlbumBuilder() {
      return albumBuilder != null;
    }

    /**
      * Clears the value of the 'album' field.
      * @return This builder.
      */
    public Builder clearAlbum() {
      album = null;
      albumBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artists' field.
      * @return The value.
      */
    public java.util.List<Artist> getArtists() {
      return artists;
    }


    /**
      * Sets the value of the 'artists' field.
      * @param value The value of 'artists'.
      * @return This builder.
      */
    public Builder setArtists(java.util.List<Artist> value) {
      validate(fields()[1], value);
      this.artists = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artists' field has been set.
      * @return True if the 'artists' field has been set, false otherwise.
      */
    public boolean hasArtists() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artists' field.
      * @return This builder.
      */
    public Builder clearArtists() {
      artists = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'disc_number' field.
      * @return The value.
      */
    public int getDiscNumber() {
      return disc_number;
    }


    /**
      * Sets the value of the 'disc_number' field.
      * @param value The value of 'disc_number'.
      * @return This builder.
      */
    public Builder setDiscNumber(int value) {
      validate(fields()[2], value);
      this.disc_number = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'disc_number' field has been set.
      * @return True if the 'disc_number' field has been set, false otherwise.
      */
    public boolean hasDiscNumber() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'disc_number' field.
      * @return This builder.
      */
    public Builder clearDiscNumber() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration_ms' field.
      * @return The value.
      */
    public int getDurationMs() {
      return duration_ms;
    }


    /**
      * Sets the value of the 'duration_ms' field.
      * @param value The value of 'duration_ms'.
      * @return This builder.
      */
    public Builder setDurationMs(int value) {
      validate(fields()[3], value);
      this.duration_ms = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'duration_ms' field has been set.
      * @return True if the 'duration_ms' field has been set, false otherwise.
      */
    public boolean hasDurationMs() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'duration_ms' field.
      * @return This builder.
      */
    public Builder clearDurationMs() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'explicit' field.
      * @return The value.
      */
    public boolean getExplicit() {
      return explicit;
    }


    /**
      * Sets the value of the 'explicit' field.
      * @param value The value of 'explicit'.
      * @return This builder.
      */
    public Builder setExplicit(boolean value) {
      validate(fields()[4], value);
      this.explicit = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'explicit' field has been set.
      * @return True if the 'explicit' field has been set, false otherwise.
      */
    public boolean hasExplicit() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'explicit' field.
      * @return This builder.
      */
    public Builder clearExplicit() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'id' field.
      * @return The value.
      */
    public CharSequence getId() {
      return id;
    }


    /**
      * Sets the value of the 'id' field.
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(CharSequence value) {
      validate(fields()[5], value);
      this.id = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'id' field.
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public Builder setName(CharSequence value) {
      validate(fields()[6], value);
      this.name = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public Builder clearName() {
      name = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'popularity' field.
      * @return The value.
      */
    public int getPopularity() {
      return popularity;
    }


    /**
      * Sets the value of the 'popularity' field.
      * @param value The value of 'popularity'.
      * @return This builder.
      */
    public Builder setPopularity(int value) {
      validate(fields()[7], value);
      this.popularity = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'popularity' field has been set.
      * @return True if the 'popularity' field has been set, false otherwise.
      */
    public boolean hasPopularity() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'popularity' field.
      * @return This builder.
      */
    public Builder clearPopularity() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'type' field.
      * @return The value.
      */
    public CharSequence getType() {
      return type;
    }


    /**
      * Sets the value of the 'type' field.
      * @param value The value of 'type'.
      * @return This builder.
      */
    public Builder setType(CharSequence value) {
      validate(fields()[8], value);
      this.type = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'type' field has been set.
      * @return True if the 'type' field has been set, false otherwise.
      */
    public boolean hasType() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'type' field.
      * @return This builder.
      */
    public Builder clearType() {
      type = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'eventTime' field.
      * @return The value.
      */
    public CharSequence getEventTime() {
      return eventTime;
    }


    /**
      * Sets the value of the 'eventTime' field.
      * @param value The value of 'eventTime'.
      * @return This builder.
      */
    public Builder setEventTime(CharSequence value) {
      validate(fields()[9], value);
      this.eventTime = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'eventTime' field has been set.
      * @return True if the 'eventTime' field has been set, false otherwise.
      */
    public boolean hasEventTime() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'eventTime' field.
      * @return This builder.
      */
    public Builder clearEventTime() {
      eventTime = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Track build() {
      try {
        Track record = new Track();
        if (albumBuilder != null) {
          try {
            record.album = this.albumBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("album"));
            throw e;
          }
        } else {
          record.album = fieldSetFlags()[0] ? this.album : (Album) defaultValue(fields()[0]);
        }
        record.artists = fieldSetFlags()[1] ? this.artists : (java.util.List<Artist>) defaultValue(fields()[1]);
        record.disc_number = fieldSetFlags()[2] ? this.disc_number : (Integer) defaultValue(fields()[2]);
        record.duration_ms = fieldSetFlags()[3] ? this.duration_ms : (Integer) defaultValue(fields()[3]);
        record.explicit = fieldSetFlags()[4] ? this.explicit : (Boolean) defaultValue(fields()[4]);
        record.id = fieldSetFlags()[5] ? this.id : (CharSequence) defaultValue(fields()[5]);
        record.name = fieldSetFlags()[6] ? this.name : (CharSequence) defaultValue(fields()[6]);
        record.popularity = fieldSetFlags()[7] ? this.popularity : (Integer) defaultValue(fields()[7]);
        record.type = fieldSetFlags()[8] ? this.type : (CharSequence) defaultValue(fields()[8]);
        record.eventTime = fieldSetFlags()[9] ? this.eventTime : (CharSequence) defaultValue(fields()[9]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Track>
    WRITER$ = (org.apache.avro.io.DatumWriter<Track>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Track>
    READER$ = (org.apache.avro.io.DatumReader<Track>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.album.customEncode(out);

    long size0 = this.artists.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (Artist e0: this.artists) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    out.writeInt(this.disc_number);

    out.writeInt(this.duration_ms);

    out.writeBoolean(this.explicit);

    out.writeString(this.id);

    out.writeString(this.name);

    out.writeInt(this.popularity);

    out.writeString(this.type);

    out.writeString(this.eventTime);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.album == null) {
        this.album = new Album();
      }
      this.album.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<Artist> a0 = this.artists;
      if (a0 == null) {
        a0 = new SpecificData.Array<Artist>((int)size0, SCHEMA$.getField("artists").schema());
        this.artists = a0;
      } else a0.clear();
      SpecificData.Array<Artist> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Artist>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          Artist e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new Artist();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      this.disc_number = in.readInt();

      this.duration_ms = in.readInt();

      this.explicit = in.readBoolean();

      this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);

      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.popularity = in.readInt();

      this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);

      this.eventTime = in.readString(this.eventTime instanceof Utf8 ? (Utf8)this.eventTime : null);

    } else {
      for (int i = 0; i < 10; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.album == null) {
            this.album = new Album();
          }
          this.album.customDecode(in);
          break;

        case 1:
          long size0 = in.readArrayStart();
          java.util.List<Artist> a0 = this.artists;
          if (a0 == null) {
            a0 = new SpecificData.Array<Artist>((int)size0, SCHEMA$.getField("artists").schema());
            this.artists = a0;
          } else a0.clear();
          SpecificData.Array<Artist> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<Artist>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              Artist e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new Artist();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 2:
          this.disc_number = in.readInt();
          break;

        case 3:
          this.duration_ms = in.readInt();
          break;

        case 4:
          this.explicit = in.readBoolean();
          break;

        case 5:
          this.id = in.readString(this.id instanceof Utf8 ? (Utf8)this.id : null);
          break;

        case 6:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 7:
          this.popularity = in.readInt();
          break;

        case 8:
          this.type = in.readString(this.type instanceof Utf8 ? (Utf8)this.type : null);
          break;

        case 9:
          this.eventTime = in.readString(this.eventTime instanceof Utf8 ? (Utf8)this.eventTime : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










